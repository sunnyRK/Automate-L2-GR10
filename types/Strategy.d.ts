/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface StrategyInterface extends ethers.utils.Interface {
  functions: {
    "ADDRESSES_PROVIDER()": FunctionFragment;
    "LENDING_POOL()": FunctionFragment;
    "ROUTER()": FunctionFragment;
    "WBTC()": FunctionFragment;
    "WETH()": FunctionFragment;
    "aWBTC()": FunctionFragment;
    "aaveToken()": FunctionFragment;
    "depositInVault(uint256)": FunctionFragment;
    "executeOperation(address[],uint256[],uint256[],address,bytes)": FunctionFragment;
    "flashLoan(address)": FunctionFragment;
    "getAAVEUserDetails()": FunctionFragment;
    "getBal()": FunctionFragment;
    "initialized()": FunctionFragment;
    "lendingPoolAddress()": FunctionFragment;
    "provider()": FunctionFragment;
    "redeem(uint256)": FunctionFragment;
    "underlying()": FunctionFragment;
    "val()": FunctionFragment;
    "withdrawFromVault(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ADDRESSES_PROVIDER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LENDING_POOL",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ROUTER", values?: undefined): string;
  encodeFunctionData(functionFragment: "WBTC", values?: undefined): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(functionFragment: "aWBTC", values?: undefined): string;
  encodeFunctionData(functionFragment: "aaveToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositInVault",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeOperation",
    values: [string[], BigNumberish[], BigNumberish[], string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "flashLoan", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getAAVEUserDetails",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getBal", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lendingPoolAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "provider", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "val", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawFromVault",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "ADDRESSES_PROVIDER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LENDING_POOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ROUTER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WBTC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "aWBTC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "aaveToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositInVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeOperation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "flashLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAAVEUserDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lendingPoolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "provider", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "val", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromVault",
    data: BytesLike
  ): Result;

  events: {};
}

export class Strategy extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StrategyInterface;

  functions: {
    ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<[string]>;

    "ADDRESSES_PROVIDER()"(overrides?: CallOverrides): Promise<[string]>;

    LENDING_POOL(overrides?: CallOverrides): Promise<[string]>;

    "LENDING_POOL()"(overrides?: CallOverrides): Promise<[string]>;

    ROUTER(overrides?: CallOverrides): Promise<[string]>;

    "ROUTER()"(overrides?: CallOverrides): Promise<[string]>;

    WBTC(overrides?: CallOverrides): Promise<[string]>;

    "WBTC()"(overrides?: CallOverrides): Promise<[string]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    "WETH()"(overrides?: CallOverrides): Promise<[string]>;

    aWBTC(overrides?: CallOverrides): Promise<[string]>;

    "aWBTC()"(overrides?: CallOverrides): Promise<[string]>;

    aaveToken(overrides?: CallOverrides): Promise<[string]>;

    "aaveToken()"(overrides?: CallOverrides): Promise<[string]>;

    depositInVault(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "depositInVault(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeOperation(
      assets: string[],
      amounts: BigNumberish[],
      premiums: BigNumberish[],
      initiator: string,
      params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "executeOperation(address[],uint256[],uint256[],address,bytes)"(
      assets: string[],
      amounts: BigNumberish[],
      premiums: BigNumberish[],
      initiator: string,
      params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    flashLoan(
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "flashLoan(address)"(
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAAVEUserDetails(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
    >;

    "getAAVEUserDetails()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
    >;

    getBal(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    "getBal()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    initialized(overrides?: CallOverrides): Promise<[boolean]>;

    "initialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    lendingPoolAddress(overrides?: CallOverrides): Promise<[string]>;

    "lendingPoolAddress()"(overrides?: CallOverrides): Promise<[string]>;

    provider(overrides?: CallOverrides): Promise<[string]>;

    "provider()"(overrides?: CallOverrides): Promise<[string]>;

    redeem(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "redeem(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    underlying(overrides?: CallOverrides): Promise<[string]>;

    "underlying()"(overrides?: CallOverrides): Promise<[string]>;

    val(overrides?: CallOverrides): Promise<[BigNumber]>;

    "val()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawFromVault(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawFromVault(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<string>;

  "ADDRESSES_PROVIDER()"(overrides?: CallOverrides): Promise<string>;

  LENDING_POOL(overrides?: CallOverrides): Promise<string>;

  "LENDING_POOL()"(overrides?: CallOverrides): Promise<string>;

  ROUTER(overrides?: CallOverrides): Promise<string>;

  "ROUTER()"(overrides?: CallOverrides): Promise<string>;

  WBTC(overrides?: CallOverrides): Promise<string>;

  "WBTC()"(overrides?: CallOverrides): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  "WETH()"(overrides?: CallOverrides): Promise<string>;

  aWBTC(overrides?: CallOverrides): Promise<string>;

  "aWBTC()"(overrides?: CallOverrides): Promise<string>;

  aaveToken(overrides?: CallOverrides): Promise<string>;

  "aaveToken()"(overrides?: CallOverrides): Promise<string>;

  depositInVault(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "depositInVault(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeOperation(
    assets: string[],
    amounts: BigNumberish[],
    premiums: BigNumberish[],
    initiator: string,
    params: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "executeOperation(address[],uint256[],uint256[],address,bytes)"(
    assets: string[],
    amounts: BigNumberish[],
    premiums: BigNumberish[],
    initiator: string,
    params: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  flashLoan(
    asset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "flashLoan(address)"(
    asset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAAVEUserDetails(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
  >;

  "getAAVEUserDetails()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
  >;

  getBal(overrides?: CallOverrides): Promise<[BigNumber, BigNumber, BigNumber]>;

  "getBal()"(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  "initialized()"(overrides?: CallOverrides): Promise<boolean>;

  lendingPoolAddress(overrides?: CallOverrides): Promise<string>;

  "lendingPoolAddress()"(overrides?: CallOverrides): Promise<string>;

  redeem(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "redeem(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  underlying(overrides?: CallOverrides): Promise<string>;

  "underlying()"(overrides?: CallOverrides): Promise<string>;

  val(overrides?: CallOverrides): Promise<BigNumber>;

  "val()"(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawFromVault(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawFromVault(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<string>;

    "ADDRESSES_PROVIDER()"(overrides?: CallOverrides): Promise<string>;

    LENDING_POOL(overrides?: CallOverrides): Promise<string>;

    "LENDING_POOL()"(overrides?: CallOverrides): Promise<string>;

    ROUTER(overrides?: CallOverrides): Promise<string>;

    "ROUTER()"(overrides?: CallOverrides): Promise<string>;

    WBTC(overrides?: CallOverrides): Promise<string>;

    "WBTC()"(overrides?: CallOverrides): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    "WETH()"(overrides?: CallOverrides): Promise<string>;

    aWBTC(overrides?: CallOverrides): Promise<string>;

    "aWBTC()"(overrides?: CallOverrides): Promise<string>;

    aaveToken(overrides?: CallOverrides): Promise<string>;

    "aaveToken()"(overrides?: CallOverrides): Promise<string>;

    depositInVault(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositInVault(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    executeOperation(
      assets: string[],
      amounts: BigNumberish[],
      premiums: BigNumberish[],
      initiator: string,
      params: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "executeOperation(address[],uint256[],uint256[],address,bytes)"(
      assets: string[],
      amounts: BigNumberish[],
      premiums: BigNumberish[],
      initiator: string,
      params: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    flashLoan(asset: string, overrides?: CallOverrides): Promise<void>;

    "flashLoan(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getAAVEUserDetails(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
    >;

    "getAAVEUserDetails()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
    >;

    getBal(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    "getBal()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    "initialized()"(overrides?: CallOverrides): Promise<boolean>;

    lendingPoolAddress(overrides?: CallOverrides): Promise<string>;

    "lendingPoolAddress()"(overrides?: CallOverrides): Promise<string>;

    provider(overrides?: CallOverrides): Promise<string>;

    "provider()"(overrides?: CallOverrides): Promise<string>;

    redeem(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "redeem(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    underlying(overrides?: CallOverrides): Promise<string>;

    "underlying()"(overrides?: CallOverrides): Promise<string>;

    val(overrides?: CallOverrides): Promise<BigNumber>;

    "val()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFromVault(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdrawFromVault(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<BigNumber>;

    "ADDRESSES_PROVIDER()"(overrides?: CallOverrides): Promise<BigNumber>;

    LENDING_POOL(overrides?: CallOverrides): Promise<BigNumber>;

    "LENDING_POOL()"(overrides?: CallOverrides): Promise<BigNumber>;

    ROUTER(overrides?: CallOverrides): Promise<BigNumber>;

    "ROUTER()"(overrides?: CallOverrides): Promise<BigNumber>;

    WBTC(overrides?: CallOverrides): Promise<BigNumber>;

    "WBTC()"(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    "WETH()"(overrides?: CallOverrides): Promise<BigNumber>;

    aWBTC(overrides?: CallOverrides): Promise<BigNumber>;

    "aWBTC()"(overrides?: CallOverrides): Promise<BigNumber>;

    aaveToken(overrides?: CallOverrides): Promise<BigNumber>;

    "aaveToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    depositInVault(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "depositInVault(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeOperation(
      assets: string[],
      amounts: BigNumberish[],
      premiums: BigNumberish[],
      initiator: string,
      params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "executeOperation(address[],uint256[],uint256[],address,bytes)"(
      assets: string[],
      amounts: BigNumberish[],
      premiums: BigNumberish[],
      initiator: string,
      params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    flashLoan(
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "flashLoan(address)"(
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAAVEUserDetails(overrides?: CallOverrides): Promise<BigNumber>;

    "getAAVEUserDetails()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBal(overrides?: CallOverrides): Promise<BigNumber>;

    "getBal()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    "initialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    lendingPoolAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "lendingPoolAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    provider(overrides?: CallOverrides): Promise<BigNumber>;

    "provider()"(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "redeem(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;

    "underlying()"(overrides?: CallOverrides): Promise<BigNumber>;

    val(overrides?: CallOverrides): Promise<BigNumber>;

    "val()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFromVault(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawFromVault(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADDRESSES_PROVIDER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ADDRESSES_PROVIDER()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LENDING_POOL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "LENDING_POOL()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROUTER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ROUTER()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WBTC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "WBTC()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "WETH()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aWBTC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "aWBTC()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aaveToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "aaveToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositInVault(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "depositInVault(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeOperation(
      assets: string[],
      amounts: BigNumberish[],
      premiums: BigNumberish[],
      initiator: string,
      params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "executeOperation(address[],uint256[],uint256[],address,bytes)"(
      assets: string[],
      amounts: BigNumberish[],
      premiums: BigNumberish[],
      initiator: string,
      params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    flashLoan(
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "flashLoan(address)"(
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAAVEUserDetails(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAAVEUserDetails()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getBal()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "initialized()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lendingPoolAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lendingPoolAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    provider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "provider()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "redeem(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "underlying()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    val(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "val()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFromVault(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawFromVault(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
